// Mocks generated by Mockito 5.4.6 from annotations
// in flashcard_app/test/study_mode_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:ui' as _i6;

import 'package:flashcard_app/database/database_helper.dart' as _i5;
import 'package:flashcard_app/models/flashcard.dart' as _i4;
import 'package:flashcard_app/providers/card_provider.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [CardProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockCardProvider extends _i1.Mock implements _i2.CardProvider {
  MockCardProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i3.Future<List<_i4.FlashCard>> getCardsForDeck(int? deckId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCardsForDeck,
          [deckId],
        ),
        returnValue: _i3.Future<List<_i4.FlashCard>>.value(<_i4.FlashCard>[]),
      ) as _i3.Future<List<_i4.FlashCard>>);

  @override
  _i3.Future<void> addCard(
    int? deckId,
    String? question,
    String? answer,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addCard,
          [
            deckId,
            question,
            answer,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deleteCard(int? cardId) => (super.noSuchMethod(
        Invocation.method(
          #deleteCard,
          [cardId],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> updateCard(_i4.FlashCard? updatedCard) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateCard,
          [updatedCard],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deleteAllCardsForDeck(int? deckId) => (super.noSuchMethod(
        Invocation.method(
          #deleteAllCardsForDeck,
          [deckId],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> toggleCardMastery(
    int? cardId,
    bool? isMastered,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #toggleCardMastery,
          [
            cardId,
            isMastered,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> setDatabaseHelper(_i5.DatabaseHelper? db) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDatabaseHelper,
          [db],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  void addListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
