// Mocks generated by Mockito 5.4.6 from annotations
// in flashcard_app/test/deck_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:flashcard_app/database/database_helper.dart' as _i5;
import 'package:flashcard_app/models/deck.dart' as _i3;
import 'package:flashcard_app/models/flashcard.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite/sqflite.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDatabase_0 extends _i1.SmartFake implements _i2.Database {
  _FakeDatabase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDeck_1 extends _i1.SmartFake implements _i3.Deck {
  _FakeDeck_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFlashCard_2 extends _i1.SmartFake implements _i4.FlashCard {
  _FakeFlashCard_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DatabaseHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseHelper extends _i1.Mock implements _i5.DatabaseHelper {
  MockDatabaseHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.Database> get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _i6.Future<_i2.Database>.value(_FakeDatabase_0(
          this,
          Invocation.getter(#database),
        )),
      ) as _i6.Future<_i2.Database>);

  @override
  _i6.Future<_i3.Deck> createDeck(_i3.Deck? deck) => (super.noSuchMethod(
        Invocation.method(
          #createDeck,
          [deck],
        ),
        returnValue: _i6.Future<_i3.Deck>.value(_FakeDeck_1(
          this,
          Invocation.method(
            #createDeck,
            [deck],
          ),
        )),
      ) as _i6.Future<_i3.Deck>);

  @override
  _i6.Future<List<_i3.Deck>> getAllDecks() => (super.noSuchMethod(
        Invocation.method(
          #getAllDecks,
          [],
        ),
        returnValue: _i6.Future<List<_i3.Deck>>.value(<_i3.Deck>[]),
      ) as _i6.Future<List<_i3.Deck>>);

  @override
  _i6.Future<_i3.Deck?> getDeck(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getDeck,
          [id],
        ),
        returnValue: _i6.Future<_i3.Deck?>.value(),
      ) as _i6.Future<_i3.Deck?>);

  @override
  _i6.Future<int> updateDeck(_i3.Deck? deck) => (super.noSuchMethod(
        Invocation.method(
          #updateDeck,
          [deck],
        ),
        returnValue: _i6.Future<int>.value(0),
      ) as _i6.Future<int>);

  @override
  _i6.Future<int> deleteDeck(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteDeck,
          [id],
        ),
        returnValue: _i6.Future<int>.value(0),
      ) as _i6.Future<int>);

  @override
  _i6.Future<_i4.FlashCard> createCard(_i4.FlashCard? card) =>
      (super.noSuchMethod(
        Invocation.method(
          #createCard,
          [card],
        ),
        returnValue: _i6.Future<_i4.FlashCard>.value(_FakeFlashCard_2(
          this,
          Invocation.method(
            #createCard,
            [card],
          ),
        )),
      ) as _i6.Future<_i4.FlashCard>);

  @override
  _i6.Future<List<_i4.FlashCard>> getCardsForDeck(int? deckId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCardsForDeck,
          [deckId],
        ),
        returnValue: _i6.Future<List<_i4.FlashCard>>.value(<_i4.FlashCard>[]),
      ) as _i6.Future<List<_i4.FlashCard>>);

  @override
  _i6.Future<int> updateCard(_i4.FlashCard? card) => (super.noSuchMethod(
        Invocation.method(
          #updateCard,
          [card],
        ),
        returnValue: _i6.Future<int>.value(0),
      ) as _i6.Future<int>);

  @override
  _i6.Future<int> deleteAllCardsForDeck(int? deckId) => (super.noSuchMethod(
        Invocation.method(
          #deleteAllCardsForDeck,
          [deckId],
        ),
        returnValue: _i6.Future<int>.value(0),
      ) as _i6.Future<int>);

  @override
  _i6.Future<int> toggleCardMastery(
    int? cardId,
    bool? isMastered,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #toggleCardMastery,
          [
            cardId,
            isMastered,
          ],
        ),
        returnValue: _i6.Future<int>.value(0),
      ) as _i6.Future<int>);

  @override
  _i6.Future<int> deleteCard(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteCard,
          [id],
        ),
        returnValue: _i6.Future<int>.value(0),
      ) as _i6.Future<int>);

  @override
  _i6.Future<List<_i3.Deck>> searchDecks(String? query) => (super.noSuchMethod(
        Invocation.method(
          #searchDecks,
          [query],
        ),
        returnValue: _i6.Future<List<_i3.Deck>>.value(<_i3.Deck>[]),
      ) as _i6.Future<List<_i3.Deck>>);

  @override
  _i6.Future<List<_i4.FlashCard>> searchCards(
    int? deckId,
    String? query,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchCards,
          [
            deckId,
            query,
          ],
        ),
        returnValue: _i6.Future<List<_i4.FlashCard>>.value(<_i4.FlashCard>[]),
      ) as _i6.Future<List<_i4.FlashCard>>);

  @override
  _i6.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}
