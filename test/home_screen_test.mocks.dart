// Mocks generated by Mockito 5.4.6 from annotations
// in flashcard_app/test/home_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i7;

import 'package:flashcard_app/database/database_helper.dart' as _i6;
import 'package:flashcard_app/models/deck.dart' as _i3;
import 'package:flashcard_app/models/flashcard.dart' as _i5;
import 'package:flashcard_app/providers/card_provider.dart' as _i8;
import 'package:flashcard_app/providers/deck_provider.dart' as _i2;
import 'package:flashcard_app/providers/theme_provider.dart' as _i9;
import 'package:flutter/material.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [DeckProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeckProvider extends _i1.Mock implements _i2.DeckProvider {
  @override
  List<_i3.Deck> get decks => (super.noSuchMethod(
        Invocation.getter(#decks),
        returnValue: <_i3.Deck>[],
        returnValueForMissingStub: <_i3.Deck>[],
      ) as List<_i3.Deck>);

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i4.Future<void> loadDecks() => (super.noSuchMethod(
        Invocation.method(
          #loadDecks,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> addDeck(
    String? title,
    String? description,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addDeck,
          [
            title,
            description,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateDeck(_i3.Deck? deck) => (super.noSuchMethod(
        Invocation.method(
          #updateDeck,
          [deck],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteDeck(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteDeck,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i5.FlashCard>> getCardsForDeck(int? deckId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCardsForDeck,
          [deckId],
        ),
        returnValue: _i4.Future<List<_i5.FlashCard>>.value(<_i5.FlashCard>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i5.FlashCard>>.value(<_i5.FlashCard>[]),
      ) as _i4.Future<List<_i5.FlashCard>>);

  @override
  _i4.Future<void> addCard(
    int? deckId,
    String? question,
    String? answer,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addCard,
          [
            deckId,
            question,
            answer,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> toggleCardMastery(
    int? cardId,
    int? deckId,
    bool? isMastered,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #toggleCardMastery,
          [
            cardId,
            deckId,
            isMastered,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> refreshDeckData(int? deckId) => (super.noSuchMethod(
        Invocation.method(
          #refreshDeckData,
          [deckId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void setSearchQuery(String? query) => super.noSuchMethod(
        Invocation.method(
          #setSearchQuery,
          [query],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setDatabaseHelper(_i6.DatabaseHelper? dbHelper) => super.noSuchMethod(
        Invocation.method(
          #setDatabaseHelper,
          [dbHelper],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [CardProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockCardProvider extends _i1.Mock implements _i8.CardProvider {
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i4.Future<List<_i5.FlashCard>> getCardsForDeck(int? deckId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCardsForDeck,
          [deckId],
        ),
        returnValue: _i4.Future<List<_i5.FlashCard>>.value(<_i5.FlashCard>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i5.FlashCard>>.value(<_i5.FlashCard>[]),
      ) as _i4.Future<List<_i5.FlashCard>>);

  @override
  _i4.Future<void> addCard(
    int? deckId,
    String? question,
    String? answer,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addCard,
          [
            deckId,
            question,
            answer,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteCard(int? cardId) => (super.noSuchMethod(
        Invocation.method(
          #deleteCard,
          [cardId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateCard(_i5.FlashCard? updatedCard) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateCard,
          [updatedCard],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteAllCardsForDeck(int? deckId) => (super.noSuchMethod(
        Invocation.method(
          #deleteAllCardsForDeck,
          [deckId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> toggleCardMastery(
    int? cardId,
    bool? isMastered,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #toggleCardMastery,
          [
            cardId,
            isMastered,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setDatabaseHelper(_i6.DatabaseHelper? db) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDatabaseHelper,
          [db],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ThemeProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockThemeProvider extends _i1.Mock implements _i9.ThemeProvider {
  @override
  _i10.ThemeMode get themeMode => (super.noSuchMethod(
        Invocation.getter(#themeMode),
        returnValue: _i10.ThemeMode.system,
        returnValueForMissingStub: _i10.ThemeMode.system,
      ) as _i10.ThemeMode);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i4.Future<void> toggleTheme() => (super.noSuchMethod(
        Invocation.method(
          #toggleTheme,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
